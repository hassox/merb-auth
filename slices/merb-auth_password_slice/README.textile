MauthPasswordSlice ==================

A slice for the Merb framework that uses the mauth-core authentication
framework.  This provides basic form based login as well as basic auth login.
To see how to customize the authentication process, see mauth-core.

To use this slice you should supply a User type model that logs in via an
identifier and password.  i.e. "email" and "password", or "login" & "password"

Additionally your model should implement a class level method,
authenticate(login, password)  This should return the user object, or if not
found should return false or nil

For example

User.authenticate("fred", "sekrit") #=> The user object for the "fred" login
or nil / false if not found


------------------------------------------------------------------------------

.
|-- LICENSE
|-- README
|-- Rakefile
|-- TODO
|-- app
|   |-- controllers
|   |   |-- application.rb
|   |   |-- exceptions.rb
|   |   `-- sessions.rb
|   |-- helpers
|   |   `-- application_helper.rb
|   `-- views
|       |-- exceptions
|       |   `-- unauthenticated.html.erb
|       `-- layout
|           `-- mauth_password_slice.html.erb
|-- lib
|   |-- mauth_password_slice
|   |   |-- merbtasks.rb
|   |   |-- slicetasks.rb
|   |   `-- spectasks.rb
|   `-- mauth_password_slice.rb
|-- pkg
|   `-- mauth_password_slice-0.9.5.gem
|-- public
|   |-- javascripts
|   |   `-- master.js
|   `-- stylesheets
|       `-- master.css
|-- spec
|   |-- controllers
|   |   `-- main_spec.rb
|   |-- mauth_password_slice_spec.rb
|   `-- spec_helper.rb
|-- stubs
    `-- app
        `-- controllers
           |-- application.rb
            `-- main.rb


1. Rake tasks to package/install the gem - edit this to modify the manifest.
2. The slice application: controllers, models, helpers, views.
3. The default layout, as specified in Merb::Slices::config[:mauth_password_slice][:layout]
   change this to :application to use the app's layout.
4. Standard rake tasks available to your application.
5. Your custom application rake tasks.
6. The main slice file - contains all slice setup logic/config.
7. Public assets you (optionally) install using rake slices:mauth_password_slice:install
8. Specs for basis slice behaviour - you usually adapt these for your slice.
9. Stubs of classes/views/files for the end-user to override - usually these 
   mimic the files in app/ and/or public/; use rake slices:mauth_password_slice:stubs to
   get started with the override stubs. Also, slices:mauth_password_slice:patch will
   copy over views to override in addition to the files found in /stubs.
   

To see all available tasks for MauthPasswordSlice run:

rake -T slices:mauth_password_slice

------------------------------------------------------------------------------

Instructions for installation:

file: config/init.rb

# add the slice as a regular dependency

dependency 'mauth_password_slice'

# if needed, configure which slices to load and in which order

Merb::Plugins.config[:merb_slices] = { :queue => ["MauthPasswordSlice", ...] }

# Setup your application to use MauthPasswordSlice in an after_app_loads block
# Note MPS is given as an alias for MauthPasswordSlice

<pre><code>
Merb::BootLoader.after_app_loads do
  MPS[:user_class] = User # Set your user class here 
  MPS[:login_field] = {:label => "Login",    :method => :login} 
  MPS[:password_field] = {:label => "Password", :method => :password} 
end
</code></pre>

These are used to setup the login and password fields and the labels that are
shown.  The defaults are shown


file: config/router.rb

r.add_slice(:MauthPasswordSlice, :path => "", :default_routes => false)

Normally you should also run the following rake task:

rake slices:mauth_password_slice:install

------------------------------------------------------------------------------

You can put your application-level overrides in:

host-app/slices/mauth_password_slice/app - controllers, models, views ...

Templates are located in this order:

1. host-app/slices/mauth_password_slice/app/views/* 2.
gems/mauth_password_slice/app/views/* 3. host-app/app/views/*

To customize the login form, create a view in your host-app

host-app/app/views/exceptions/unauthenticated.html.haml

The host-app's application layout is used by default

You can use the host application's layout by configuring the
mauth_password_slice slice in a before_app_loads block:

You'll need to setup the Authentication::Manager#fetch_user and store_user
methods for your given user model.

------------------------------------------------------------------------------

About Slices ============

Merb-Slices is a Merb plugin for using and creating application 'slices' which
help you modularize your application. Usually these are reuseable extractions
from your main app. In effect, a Slice is just like a regular Merb MVC
application, both in functionality as well as in structure.

When you generate a Slice stub structure, a module is setup to serve as a
namespace for your controller, models, helpers etc. This ensures maximum
encapsulation. You could say a Slice is a mixture between a Merb plugin (a
Gem) and a Merb application, reaping the benefits of both.

A host application can 'mount' a Slice inside the router, which means you have
full over control how it integrates. By default a Slice's routes are prefixed
by its name (a router :namespace), but you can easily provide your own prefix
or leave it out, mounting it at the root of your url-schema. You can even
mount a Slice multiple times and give extra parameters to customize an
instance's behaviour.

A Slice's Application controller uses controller_for_slice to setup slice
specific behaviour, which mainly affects cascaded view handling. Additionaly,
this method is available to any kind of controller, so it can be used for Merb
Mailer too for example.

There are many ways which let you customize a Slice's functionality and
appearance without ever touching the Gem-level code itself. It's not only easy
to add template/layout overrides, you can also add/modify controllers, models
and other runtime code from within the host application.

To create your own Slice run this (somewhere outside of your merb app):

$ merb-gen slice <your-lowercase-slice-name>
